open System.IO


type Style =
    | StyleSheet of string
    | Js of string
type Paths =
    { Style: Style list
      App: string list
      Runtime: string list
      Vendors: string list }
    with static member Init =
            { Style = []
              App = []
              Runtime = []
              Vendors = [] }
              
let isNotMapFile (line: string) = line.Contains(".map") |> not
let parsePath (line: string) =
    let split = line.Trim().TrimEnd(',').Split(':')
    split.[1].Trim()

let (|Style|_|) line = 
    let isStyleJs (line: string) = line.Contains("style.js") && isNotMapFile line
    let isCss (line: string) = line.Contains("app.css") && isNotMapFile line
    if isCss line then 
        Some (Style StyleSheet (parsePath line))
    elif isStyleJs line then 
        Some (Style Js (parsePath line)) 
    else 
        None

let (|App|_|) line = 
    let isAppJs (line: string) = line.Contains("app.js") && isNotMapFile line
    if isAppJs line then Some (App (parsePath line)) else None

let (|Runtime|_|) line = 
    let isRuntimeJs (line: string) = line.Contains("runtime.js") && isNotMapFile line
    if isRuntimeJs line then Some (Runtime (parsePath line)) else None

let (|Vendor|_|) line = 
    let isVendorJs (line: string) = line.Contains("vendor.") && line.Contains(".js") && isNotMapFile line
    if isVendorJs line then Some (Vendor (parsePath line)) else None

let parseScriptPaths lines =
    let folder line state =
        match line with
        | Style style -> { state with Style = style :: state.Style }
        | App script -> { state with App = script :: state.App }
        | Runtime script -> { state with Runtime = script :: state.Runtime }
        | Vendor vendor -> { state with Vendors = vendor :: state.Vendors }
        | _ -> state
    (lines |> List.ofArray, Paths.Init) ||> List.foldBack folder

let generateBundleFs (paths: Paths) =
    let sb = System.Text.StringBuilder("module ChickenCheck.Backend.Bundle\n\n")
    let write x = Printf.bprintf sb x
    let writeJs path = write "        Html.script [ prop.src %s; prop.defer true ]\n" path
    let writeCss path = write "        Html.link [ prop.rel \"stylesheet\"; prop.href %s ]\n" path
    let writeStyle style =
        match style with
        | StyleSheet path -> writeCss path
        | Js path -> writeJs path

    write "// Autogenerated from build.fsx, any changes will be overwritten on build!\n\n"
    write "open Feliz.ViewEngine\n"
    write "let bundle =\n        [\n"
    paths.Runtime |> Seq.iter writeJs
    paths.Vendors |> Seq.iter writeJs
    paths.App |> Seq.iter writeJs
    paths.Style |> Seq.iter writeStyle
    write "    ]\n"

    sb.ToString()

let writeToFile file content =
    File.WriteAllText(file, content)

let manifest = "output/server/public/manifest.json"
System.IO.File.ReadAllLines manifest
|> parseScriptPaths
|> generateBundleFs
|> writeToFile "src/ChickenCheck.Backend/Views/Bundle.fs"
