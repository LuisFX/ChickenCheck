open System
open System.IO

type Bundle =
    | Script of Path: string
    | Style of Path: string
    | Other

let isScript (str: string) =
    str.Trim('"').EndsWith(".js", StringComparison.OrdinalIgnoreCase)
let isStyle (str: string) =
    str.Trim('"').EndsWith(".css", StringComparison.OrdinalIgnoreCase)

let parseLines lines : Bundle[] =
    let parseLine (line: string) =
        let split = line.Trim().TrimEnd(',').Split(':')
        if split.Length < 2 then None
        else
            let path = split.[1].Trim()
            match isScript path, isStyle path with
            | true, false -> Some (Script path)
            | false, true -> Some (Style path)
            | _, _ -> Some Other

    lines
    |> Array.choose parseLine

let writeOutput filePath (bundle: Bundle[])=
    let printBundle sb (bundle:Bundle) =
        let printStyle path = sprintf "Html.link [ prop.rel \"stylesheet\"; prop.href %s ]" path
        let printScript path = sprintf "Html.script [ prop.src %s ]" path

        match bundle with
        | Style path -> 
            Printf.bprintf sb "            %s\n" (printStyle path)
        | Script path ->
            Printf.bprintf sb "            %s\n" (printScript path)
        | Other -> ()


    let sb = System.Text.StringBuilder("module ChickenCheck.Backend.Bundle\n\n")
    Printf.bprintf sb "    // Autogenerated from build.fsx, do not change!\n\n"
    Printf.bprintf sb "    open Feliz.ViewEngine\n"
    Printf.bprintf sb "    let bundle =\n        [\n"
    bundle |> Seq.iter (printBundle sb)
    Printf.bprintf sb "        ]\n"

    File.WriteAllText(filePath, sb.ToString())

let manifest = "output/server/public/manifest.json"
System.IO.File.ReadAllLines manifest
|> parseLines
|> writeOutput ("src/ChickenCheck.Backend/Views/Bundle.fs")
